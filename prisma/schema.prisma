generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  User    User[]
}

model User {
  id       String      @id @default(uuid())
  fullname String
  password String
  phone    String      @unique
  IIN      String?
  MFO      String?
  RS       String?
  BANK     String?
  OKED     String?
  address  String?
  role     ROLE?        @default(USER_FIZ)
  status   USER_STATUS? @default(INACTIVE)
  regionId String
  region   Region      @relation(fields: [regionId], references: [id])
  Session  Session[]
  Order    Order[]
  Basket   Basket[]
  Comment  Comment[]
}

model Session {
  id          String @id @default(uuid())
  ip          String
  userId      String
  user        User   @relation(fields: [userId], references: [id])
}

model Level {
  id               String             @id @default(uuid())
  name_uz          String
  name_ru          String
  name_en          String
  MasterProfession MasterProfession[]
  ProfessionLevel  ProfessionLevel[]
  OrderProduct     OrderProduct[]
  Basket           Basket[]
}

model Profession {
  id               String             @id @default(uuid())
  name_uz          String
  name_ru          String
  name_en          String
  image            String
  isActive         Boolean            @default(false)
  MasterProfession MasterProfession[]
  ProfessionLevel  ProfessionLevel[]
  ProfessionTool   ProfessionTool[]
  OrderProduct     OrderProduct[]
  Basket           Basket[]
}

model Master {
  id               String             @id @default(uuid())
  firstname        String
  lastname         String
  phoneNumber      String
  isActive         Boolean            @default(false)
  year             Int
  image            String
  pasportImage     String
  about            String
  avarageStar      Decimal            @default(0)
  MasterProfession MasterProfession[]
  orderMaster      OrderMaster[]
  Comment          Comment[]
}

model MasterProfession {
  id              String     @id @default(uuid())
  professionId    String
  profession      Profession @relation(fields: [professionId], references: [id])
  minWorkingHours Int
  levelId         String
  level           Level      @relation(fields: [levelId], references: [id])
  priceHourly     Decimal
  priceDaily      Decimal
  experience      Int
  masterId        String
  master          Master     @relation(fields: [masterId], references: [id])
}

model Comment {
  id       String  @id @default(uuid())
  star     Decimal
  masterId String
  master   Master  @relation(fields: [masterId], references: [id])
  userId   String?
  user     User?    @relation(fields: [userId], references: [id])
}

model ProfessionLevel {
  id              String     @id @default(uuid())
  professionId    String
  profession      Profession @relation(fields: [professionId], references: [id])
  levelId         String
  level           Level      @relation(fields: [levelId], references: [id])
  minWorkingHours Int
  priceHourly     Decimal
  priceDaily      Decimal
}

model Tool {
  id             String           @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  price          Decimal
  quantity       Int
  code           Int
  image          String
  isAvailable    Boolean          @default(false)
  brandId        String?
  brand          Brand?           @relation(fields: [brandId], references: [id])
  capasityId     String?
  capasity       Capasity?        @relation(fields: [capasityId], references: [id])
  sizeId         String?
  size           Size?            @relation(fields: [sizeId], references: [id])
  ProfessionTool ProfessionTool[]
  OrderProduct   OrderProduct[]
  Basket         Basket[]
}

model ProfessionTool {
  id           String     @id @default(uuid())
  professionId String
  profession   Profession @relation(fields: [professionId], references: [id])
  toolId       String
  tool         Tool       @relation(fields: [toolId], references: [id])
}

model Order {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  address         String
  longitude       String
  latitude        String
  date            DateTime       @default(now())
  totalPrice      Decimal
  paymentType     PAYMENT_TYPE
  withDelivery    Boolean
  status          ORDER_STATUS?   @default(PENDING)
  deliveryComment String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orderMaster     OrderMaster[]
  OrderProduct    OrderProduct[]
}

model OrderMaster {
  id       String @id @default(uuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  masterId String
  master   Master @relation(fields: [masterId], references: [id])
}

model OrderProduct {
  id           String      @id @default(uuid())
  orderId      String
  order        Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  professionId String?
  profession   Profession? @relation(fields: [professionId], references: [id], onDelete: SetNull)
  toolId       String?
  tool         Tool?       @relation(fields: [toolId], references: [id], onDelete: SetNull)
  levelId      String?
  level        Level?      @relation(fields: [levelId], references: [id], onDelete: SetNull)
  timeUnit     TIME_UNIT
  workingTime  Int
  price        Decimal
  count        Int
}

model Basket {
  id           String     @id @default(uuid())
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  professionId String
  profession   Profession @relation(fields: [professionId], references: [id])
  toolId       String
  tool         Tool       @relation(fields: [toolId], references: [id])
  count        Int
  timeUnit     TIME_UNIT
  workingTime  Int
  levelId      String
  level        Level      @relation(fields: [levelId], references: [id])
}

model Brand {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  Tool    Tool[]
}

model Capasity {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  Tool    Tool[]
}

model Size {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  Tool    Tool[]
}

model FAQ {
  id          String @id @default(uuid())
  question_uz String
  question_ru String
  question_en String
  answer_uz   String
  answer_ru   String
  answer_en   String
}

model Contact_Us {
  id        String @id @default(uuid())
  firstname String
  lastname  String
  phone     String
  address   String
  message   String
}

model About_Us {
  id                    String @id @default(uuid())
  generalInformation_uz String
  generalInformation_ru String
  generalInformation_en String
  email                 String
  link                  String
  phone                 String
}

model Partners {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  image   String
  link    String
}

model ShowCase {
  id             String @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  image          String
  link           String
}

enum ROLE {
  USER_FIZ
  USER_YUR
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

enum PAYMENT_TYPE {
  PAYME
  CASH
}

enum ORDER_STATUS {
  PENDING
  ACTIVE
  CANCELLED
  COMPLETEED
}

enum TIME_UNIT {
  HOUR
  DAY
}
